#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 LightDirection_cameraspace;
varying vec3 LightPosition_worldspace;
varying vec3 EyeDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightColor;
uniform float LightPower;

void main(){

	vec3 LightColor = vec3(1,1,1);
	float LightPower = 1.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.5,0.3,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1);
	
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	gl_FragColor.rgb = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta;
		
		// Ambient : simulates indirect lighting
		// Diffuse : "color" of the object
		 // (distance*distance)

}
